@{
    // inject all css files of current site into TinyMCE editor (when edit html blocks & and richtext fields of text contents)
    var site = Site.Current.AsActual();
    var css = string.Empty;
    if (site!=null && !string.IsNullOrEmpty(site.Theme))
    {
        string cssHackBody;
        var themefiles = Kooboo.CMS.Sites.Parsers.ThemeRule.ThemeRuleParser.Parse(new Theme(site, site.Theme).LastVersion(), out cssHackBody);
        var files = themefiles.Where(o => o.PhysicalPath.EndsWith(".css", StringComparison.CurrentCultureIgnoreCase))
                              .Select(o => Kooboo.Web.Url.UrlUtility.ResolveUrl(o.VirtualPath)).ToList();
        css = string.Join(",", files);
    }

    if (!string.IsNullOrEmpty(css))
    {
        <script type="text/javascript">
            (function () {
                var siteCss = '@Html.Raw(css) ';
                tinymce.PluginManager.add('siteCss', function (editor, url) {
                    editor.addButton('siteCss', {
                        text: 'Site CSS',
                        icon: false,
                        onclick: function () {
                            this.active(!this.active());
                            var buttonPressed = this.active();
                            var fieldName = editor.id;
                            var $iframeHead = $('#' + fieldName + '@(FormHelper.TinymceIframeIdSuffix)').contents().find('head');
                            if (buttonPressed) {
                                $.each(siteCss.split(','), function (index, url) {
                                    var link = $(document.createElement('link')).attr({ rel: 'stylesheet', href: url, type: 'text/css' });
                                    $iframeHead.append(link);
                                });
                            } else {
                                var $siteCss = $iframeHead.find('link[rel="stylesheet"]').filter(function () {
                                    return this.href.toLowerCase().indexOf('@FormHelper.SiteCssPathIdentifier') > -1;
                                });
                                $siteCss.each(function () {
                                    $(this).remove();
                                });
                            }

                        }
                    });
                });

                var old = tinymce.getKoobooConfig;
                tinymce.getKoobooConfig = function () {
                    var ret = old.apply(this, arguments);
                    ret.plugins.push('siteCss');
                    ret.toolbar = ret.toolbar + ' | siteCss';
                    return ret;
                };
            }());
        </script>
    }
}